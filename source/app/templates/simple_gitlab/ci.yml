
image: registry.gitlab.com/cyber-dojo/ci-runner:v12

workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /See merge request/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


stages:
  - kosli-trail-stage
  - pre-build-test-stage
  - build-image-stage
  - post-build-test-stage
  - beta-deployment-stage
  - prod-approval-stage
  - sdlc-control-gate-stage
  - prod-deployment-stage

variables:
  # KOSLI_DRY_RUN: false                          # Org env-var
  # KOSLI_FLOW: creator                           # Repo env-var
  # KOSLI_TRAIL: $CI_COMMIT_SHA                   # Repo env-var (Expanded)
  KOSLI_ORG: cyber-dojo-trails
  KOSLI_HOST: ${KOSLI_HOST_PROD}                  # Org env-var https://app.kosli.com
  KOSLI_API_TOKEN: ${KOSLI_API_TOKEN_TRAILS_PROD} # Org env-var
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "${DOCKER_TLS_CERTDIR}/client"


default:
  artifacts:
    reports:
      dotenv: kosli.env
  before_script:
    # See dev-readme.md : What is my branch?
    - git checkout -b ${CI_COMMIT_BRANCH}
    # Make dir for kosli auto-uploaded attachments
    - echo "KOSLI_ATTACHMENTS=/tmp/kosli_attachments" >> kosli.env
    - export $(cat kosli.env)
    - mkdir -p "${KOSLI_ATTACHMENTS}"


kosli-trail:
  stage: kosli-trail-stage
  script:
    - echo "IMAGE_NAME=cyberdojo/${CI_PROJECT_NAME}:${CI_COMMIT_SHA:0:7}" >> kosli.env
    - kosli create flow ${KOSLI_FLOW} 
       --description="UX for Group/Kata creation"
       --template-file=.kosli.yml
    - kosli begin trail ${KOSLI_TRAIL}


pull-request:
  stage: pre-build-test-stage
  needs: [ kosli-trail ]
  script:
    - kosli attest pullrequest gitlab 
        --assert
        --gitlab-token=${KOSLI_GITLAB_TOKEN} 
        --name=creator.pull-request


lint:
  stage: pre-build-test-stage
  needs: [ kosli-trail ]
  script:
    - set +e
    - make lint . | tee "${KOSLI_ATTACHMENTS}"/rubocop.log
    - STATUS=${PIPESTATUS[0]}
    - set -e

    - KOSLI_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
    - cp .rubocop.yml ${KOSLI_ATTACHMENTS}
    - kosli attest generic
        --attachments="${KOSLI_ATTACHMENTS}"
        --compliant="${KOSLI_COMPLIANT}"
        --name=creator.lint

    - exit ${STATUS}


build-image:
  stage: build-image-stage
  needs: [ kosli-trail ]
  services: [ docker:24.0.5-dind ]
  script:
    - source ./sh/echo_versioner_env_vars.sh
    - export $(echo_versioner_env_vars)
    - docker-compose build --build-arg COMMIT_SHA=${CI_COMMIT_SHA}
    - echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
    - docker push ${IMAGE_NAME}


unit-test:
  stage: post-build-test-stage
  needs: [ build-image, kosli-trail ]
  services: [ docker:24.0.5-dind ]
  script:
    - set +e
    - make test | tee "${KOSLI_ATTACHMENTS}"/unit-test.log
    - STATUS=${PIPESTATUS[0]}
    - set -e

    - kosli attest junit ${IMAGE_NAME}
        --name=creator.unit-test
        --results-dir=test/server/reports/junit

    - KOSLI_COMPLIANT=$([ ${STATUS} = 0 ] && echo true || echo false)
    - kosli attest generic ${IMAGE_NAME}
        --attachments=./test/evidence.json
        --attachments=./test/server/reports
        --attachments=./test/client/reports
        --compliant=${KOSLI_COMPLIANT}
        --description="server & client branch-coverage"      
        --name=creator.branch-coverage

    - exit ${STATUS}


security-scan:
  stage: post-build-test-stage
  needs: [ build-image, kosli-trail ]
  script:
    - set +e
    - snyk container test ${IMAGE_NAME}
        --file=Dockerfile
        --json-file-output=snyk.json
        --policy-path=.snyk | tee "${KOSLI_ATTACHMENTS}"/snyk.log
    - STATUS=${PIPESTATUS[0]}
    - set -e

    - kosli attest snyk ${IMAGE_NAME}
        --name=creator.snyk-scan
        --scan-results=snyk.json

    - exit ${STATUS}


beta-deployment:
  stage: beta-deployment-stage
  needs: [ lint, pull-request, unit-test, security-scan, kosli-trail, build-image ]
  services: [ docker:24.0.5-dind ]
  variables:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_BETA}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_BETA}
    KOSLI_ENVIRONMENT_NAME: aws-beta
  script:
    - kosli expect deployment ${IMAGE_NAME}
        --description "Deployed to ${KOSLI_ENVIRONMENT_NAME} in Gitlab pipeline"
        --environment ${KOSLI_ENVIRONMENT_NAME}

    - ./sh/wait_for_deployment.sh 
        ${IMAGE_NAME}
        ${KOSLI_ENVIRONMENT_NAME}



prod-approval:
  stage: prod-approval-stage
  needs: [ beta-deployment, kosli-trail, build-image ]
  when: manual
  allow_failure: false
  script:
    - kosli report approval ${IMAGE_NAME}
        --description="Approved in Gitlab pipeline"
        --environment=aws-prod
        --approver="${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"


sdlc-control-gate:
  stage: sdlc-control-gate-stage
  needs: [ prod-approval, kosli-trail, build-image ]
  script:
    - kosli assert artifact ${IMAGE_NAME}


prod-deployment:
  stage: prod-deployment-stage
  needs: [ sdlc-control-gate, kosli-trail, build-image ]
  services: [ docker:24.0.5-dind ]
  variables:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_PROD}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_PROD}
    KOSLI_ENVIRONMENT_NAME: aws-prod
  script:
    - kosli expect deployment ${IMAGE_NAME}
        --description "Deployed to ${KOSLI_ENVIRONMENT_NAME} in Gitlab pipeline"
        --environment ${KOSLI_ENVIRONMENT_NAME}

    - ./sh/wait_for_deployment.sh 
        ${IMAGE_NAME}
        ${KOSLI_ENVIRONMENT_NAME}
